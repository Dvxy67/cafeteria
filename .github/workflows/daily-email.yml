# .github/workflows/daily-email.yml - VERSION CORRIG√âE FIREBASE ADMIN
name: Envoi Email Cafeteria Automatique

on:
  schedule:
    # Tous les jours √† 15h10 CET/CEST (13h10 UTC)
    - cron: '10 13 * * 1-5'  # Lundi √† Vendredi uniquement
  # Permet aussi de d√©clencher manuellement
  workflow_dispatch:
    inputs:
      force_send:
        description: 'Forcer envoi meme si pas configure'
        required: false
        default: false
        type: boolean

jobs:
  send-daily-email:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm init -y
          npm install @emailjs/nodejs firebase-admin

      - name: Create email service
        run: |
          cat > email-service.js << 'EOF'
          const emailjs = require('@emailjs/nodejs');
          const admin = require('firebase-admin');

          // Configuration Firebase
          const firebaseConfig = {
            type: "service_account",
            project_id: process.env.FIREBASE_PROJECT_ID,
            private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,
            private_key: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
            client_email: process.env.FIREBASE_CLIENT_EMAIL,
            client_id: process.env.FIREBASE_CLIENT_ID,
            auth_uri: "https://accounts.google.com/o/oauth2/auth",
            token_uri: "https://oauth2.googleapis.com/token",
            auth_provider_x509_cert_url: "https://www.googleapis.com/oauth2/v1/certs",
            client_x509_cert_url: process.env.FIREBASE_CLIENT_CERT_URL
          };

          // Initialiser Firebase Admin
          admin.initializeApp({
            credential: admin.credential.cert(firebaseConfig),
            databaseURL: `https://${process.env.FIREBASE_PROJECT_ID}-default-rtdb.firebaseio.com`
          });

          const db = admin.firestore();

          async function main() {
            try {
              console.log('üöÄ D√©marrage du service d\'envoi d\'emails automatique...');
              
              // 1. R√©cup√©rer les destinataires depuis Firebase
              const recipients = await getEmailRecipients();
              
              if (!recipients || recipients.length === 0) {
                console.log('‚ùå Aucun destinataire trouv√© dans Firebase');
                console.log('üí° V√©rifiez votre configuration Firebase');
                return;
              }
              
              console.log(`üìß ${recipients.length} destinataire(s) trouv√©(s):`, recipients);

              // 2. R√©cup√©rer les votes du jour
              const todayVotes = await getTodayVotes();
              console.log('üìä Votes r√©cup√©r√©s:', {
                oui: todayVotes.oui?.length || 0,
                non: todayVotes.non?.length || 0,
                total: (todayVotes.oui?.length || 0) + (todayVotes.non?.length || 0)
              });

              // 3. V√©rifier si on doit envoyer (jour de la semaine)
              const today = new Date();
              const dayOfWeek = today.getDay(); // 0 = Dimanche, 1 = Lundi, etc.
              
              // Envoyer seulement du lundi au vendredi (1-5)
              if (dayOfWeek < 1 || dayOfWeek > 5) {
                console.log(`‚ùå Pas d'envoi le ${getDayName(dayOfWeek)}`);
                if (process.env.FORCE_SEND !== 'true') {
                  return;
                }
                console.log('‚ö†Ô∏è FORCE_SEND activ√© - envoi forc√©');
              }

              // 4. Envoyer les emails
              await sendDailyReport(todayVotes, recipients);
              
              console.log('‚úÖ Envoi termin√© avec succ√®s');
              
            } catch (error) {
              console.error('‚ùå Erreur lors de l\'envoi:', error);
              console.error('üìã Stack trace:', error.stack);
              process.exit(1);
            }
          }

          // FONCTION CORRIG√âE : R√©cup√©rer les destinataires avec Firebase Admin
          async function getEmailRecipients() {
            try {
              console.log('üîç Recherche des destinataires dans Firebase...');
              
              // Option 1: Depuis email_recipients/settings
              const recipientsRef = db.collection('email_recipients').doc('settings');
              const recipientsSnap = await recipientsRef.get();
              
              console.log('üîç Document email_recipients existe:', recipientsSnap.exists);
              
              if (recipientsSnap.exists) {
                const data = recipientsSnap.data();
                console.log('üìß Donn√©es r√©cup√©r√©es:', data);
                
                if (data && data.emails && Array.isArray(data.emails)) {
                  console.log('‚úÖ Emails trouv√©s dans email_recipients');
                  return data.emails.filter(email => email && email.includes('@'));
                }
              }
              
              // Option 2: Fallback - Chercher dans email_config si existe
              console.log('üîÑ Tentative de r√©cup√©ration depuis email_config...');
              const configRef = db.collection('email_config').doc('settings');
              const configSnap = await configRef.get();
              
              console.log('üîç Document email_config existe:', configSnap.exists);
              
              if (configSnap.exists) {
                const config = configSnap.data();
                console.log('üìß Config r√©cup√©r√©e:', config);
                
                if (config && config.recipients && Array.isArray(config.recipients)) {
                  console.log('‚úÖ Destinataires trouv√©s dans email_config');
                  return config.recipients.filter(email => email && email.includes('@'));
                }
              }
              
              console.log('‚ùå Aucune configuration de destinataires trouv√©e');
              return [];
              
            } catch (error) {
              console.error('‚ùå Erreur r√©cup√©ration destinataires:', error);
              console.error('üìã D√©tails erreur:', error.message);
              return [];
            }
          }

          async function getTodayVotes() {
            try {
              const today = new Date().toISOString().split('T')[0];
              console.log(`üóìÔ∏è Recherche des votes pour: ${today}`);
              
              const votesRef = db.collection('votes').doc(today);
              const votesSnap = await votesRef.get();
              
              console.log('üîç Document votes existe:', votesSnap.exists);
              
              if (!votesSnap.exists) {
                console.log('üìä Aucun vote pour aujourd\'hui');
                return { oui: [], non: [] };
              }
              
              const votesData = votesSnap.data();
              console.log('üìä Donn√©es votes brutes:', votesData);
              
              const votes = votesData.votes || {};
              console.log('üìä Votes finaux:', votes);
              
              return votes;
              
            } catch (error) {
              console.error('‚ùå Erreur r√©cup√©ration votes:', error);
              return { oui: [], non: [] };
            }
          }

          async function sendDailyReport(votes, recipients) {
            const oui = votes.oui || [];
            const non = votes.non || [];
            const total = oui.length + non.length;

            // Calculer les statistiques
            const ouiPercent = total > 0 ? Math.round((oui.length / total) * 100) : 0;
            const nonPercent = total > 0 ? Math.round((non.length / total) * 100) : 0;

            // Donn√©es pour le template EmailJS
            const templateData = {
              date_fr: new Date().toLocaleDateString('fr-FR', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric' 
              }),
              time: new Date().toLocaleTimeString('fr-FR', { 
                hour: '2-digit', 
                minute: '2-digit' 
              }),
              oui_count: oui.length,
              non_count: non.length,
              total_count: total,
              oui_percent: ouiPercent,
              non_percent: nonPercent,
              average_week: await getWeeklyAverage(),
              // Ajouter la liste des participants
              participants_oui: oui.map(vote => vote.name).join(', ') || 'Aucun',
              participants_non: non.map(vote => vote.name).join(', ') || 'Aucun'
            };

            console.log('üìß Donn√©es √† envoyer:', templateData);
            
            // V√©rifier la configuration EmailJS
            const emailConfig = {
              serviceId: process.env.EMAILJS_SERVICE_ID,
              templateId: process.env.EMAILJS_TEMPLATE_ID,
              publicKey: process.env.EMAILJS_PUBLIC_KEY,
              privateKey: process.env.EMAILJS_PRIVATE_KEY
            };
            
            console.log('üîß Configuration EmailJS:', {
              serviceId: emailConfig.serviceId,
              templateId: emailConfig.templateId,
              publicKey: emailConfig.publicKey?.substring(0, 10) + '...',
              privateKey: emailConfig.privateKey ? 'PR√âSENT' : 'MANQUANT'
            });
            
            if (!emailConfig.serviceId || !emailConfig.templateId || !emailConfig.publicKey || !emailConfig.privateKey) {
              console.error('‚ùå Configuration EmailJS incompl√®te');
              throw new Error('Configuration EmailJS manquante');
            }
            
            let successCount = 0;
            let errorCount = 0;

            // Initialiser EmailJS
            emailjs.init({
              publicKey: emailConfig.publicKey,
              privateKey: emailConfig.privateKey
            });

            // Envoyer √† chaque destinataire
            for (let i = 0; i < recipients.length; i++) {
              const email = recipients[i];
              
              try {
                console.log(`üìß Envoi ${i + 1}/${recipients.length} vers: ${email}`);
                
                const uniqueTemplateData = {
                  ...templateData,
                  to_email: email,
                  unique_send_id: `github_${Date.now()}_${i}`,
                  send_source: 'github_actions'
                };

                console.log(`üì§ Donn√©es envoy√©es pour ${email}:`, uniqueTemplateData);

                const response = await emailjs.send(
                  emailConfig.serviceId,
                  emailConfig.templateId,
                  uniqueTemplateData
                );

                console.log(`‚úÖ Succ√®s pour ${email}:`, response);
                successCount++;
                
                // Attendre entre les envois
                if (i < recipients.length - 1) {
                  console.log('‚è≥ Attente 3 secondes...');
                  await new Promise(resolve => setTimeout(resolve, 3000));
                }
                
              } catch (error) {
                console.error(`‚ùå Erreur envoi pour ${email}:`, error);
                console.error(`üìã D√©tails erreur:`, error.message);
                errorCount++;
              }
            }

            // Enregistrer le log d'envoi
            await saveEmailLog(successCount, errorCount, total);
            
            console.log(`üìä R√©sultat final: ${successCount} succ√®s, ${errorCount} erreurs`);
          }

          async function getWeeklyAverage() {
            try {
              let totalVotes = 0;
              let days = 0;
              
              for (let i = 0; i < 7; i++) {
                const date = new Date();
                date.setDate(date.getDate() - i);
                const dateKey = date.toISOString().split('T')[0];
                
                const votesRef = db.collection('votes').doc(dateKey);
                const votesSnap = await votesRef.get();
                
                if (votesSnap.exists) {
                  const votesData = votesSnap.data();
                  const votes = votesData.votes || {};
                  const dayTotal = (votes.oui?.length || 0) + (votes.non?.length || 0);
                  totalVotes += dayTotal;
                  days++;
                }
              }
              
              return days > 0 ? Math.round(totalVotes / days) : 0;
              
            } catch (error) {
              console.error('Erreur calcul moyenne:', error);
              return 0;
            }
          }

          async function saveEmailLog(successCount, errorCount, votesTotal) {
            try {
              const today = new Date().toISOString().split('T')[0];
              const logRef = db.collection('email_logs').doc(today);
              
              await logRef.set({
                date: today,
                timestamp: new Date().toISOString(),
                success_count: successCount,
                error_count: errorCount,
                votes_total: votesTotal,
                source: 'github_actions'
              });
              
              console.log('üìù Log d\'envoi sauvegard√©');
              
            } catch (error) {
              console.error('Erreur sauvegarde log:', error);
            }
          }

          function getDayName(dayNumber) {
            const days = ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'];
            return days[dayNumber];
          }

          // Ex√©cuter le script
          main();
          EOF

      - name: Send daily email
        env:
          # Firebase Service Account (obligatoire)
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_CLIENT_CERT_URL: ${{ secrets.FIREBASE_CLIENT_CERT_URL }}
          
          # EmailJS (obligatoire)
          EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
          EMAILJS_PRIVATE_KEY: ${{ secrets.EMAILJS_PRIVATE_KEY }}
          EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
          
          # Options
          FORCE_SEND: ${{ github.event.inputs.force_send }}
          
        run: node email-service.js

      - name: Cleanup
        if: always()
        run: |
          rm -f email-service.js
          echo "üßπ Nettoyage termin√©"